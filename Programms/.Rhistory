xlab(expression(CO[2]~Concentration~'('~mL~L^-1~')')) +
ylab(expression(CO[2]~Uptake~'('~µmol~m^2~s^-1~')')) +
theme_few() +
theme(legend.position = c(0.58, 0.80)) +
theme(legend.title = element_blank()) +
scale_fill_manual(values = c("#C1D5A5", "#84A17C")) +
facet_grid(.~Type, labeller = label_both) +
geom_text(aes(label=Tukey, y = uptake_mean + sd + 2), size = 3, color = "Gray25",
show.legend = FALSE,
position = position_dodge(0.9)) +
ylim(0,50)
tag_facet(p, fontface = 1, tag_pool = c("(a) Quebec",
"(b) Mississipi"),
open = NULL, close = NULL, hjust = -0.05)
ggsave("CO2_barplot.png", width = 9, height = 3.5, dpi = 1000)
# loading the appropriate libraries
library(readr)
library(ggplot2)
library(multcompView)
library(dplyr)
# loading and checking the data
GTL <- read_csv("D:/R Programming/R_Programming/Data Sets/GTL.csv")
head(GTL)
str(GTL)
#Creating a simple plot for data visualisation
# building a simple plot for data visualisation
qplot(x = Temp, y = Light, geom = "point", data = GTL) +
facet_grid(.~Glass, labeller = label_both)
# Two-Way ANOVA Analysis of variance for two factors – Two-Way ANOVA
# creating a variable as factor for the ANOVA
GTL$Glass <- as.factor(GTL$Glass)
GTL$Temp_Factor <- as.factor(GTL$Temp)
# Two-Way ANOVA
# analysis of variance
anova <- aov(Light ~ Glass*Temp_Factor, data = GTL)
summary(anova)
#Creating a table with factors, means and standard deviation
# table with factors, means and standard deviation
data_summary <- group_by(GTL, Glass, Temp) %>%
summarise(mean=mean(Light), sd=sd(Light)) %>%
arrange(desc(mean))
print(data_summary)
#Comparing means by Tukey’s test
tukey <- TukeyHSD(anova)
print(tukey)
#Compact letter display to indicate significant differences
tukey.cld <- multcompLetters4(anova, tukey)
print(tukey.cld)
# adding the compact letter display to the table with means and sd
cld <- as.data.frame.list(tukey.cld$`Glass:Temp_Factor`)
data_summary$Tukey <- cld$Letters
print(data_summary)
write.csv("GTL_summary.csv")
# loading the appropriate libraries
library(ggplot2)
library(ggthemes)
library(multcompView)
library(dplyr)
#the standard deviation and the compact letter display
## The first step is to perform the analysis of variance, mostly known as ANOVA, using the aov function.
#Then the means comparison by Tukey’s test can be run on the object resulting from the analysis of variance.
#The use of letters to indicate significant differences in pairwise comparisons is called compact letter display,
#and can simplify the visualisation and discussion of significant differences among means. We are going to use the
#multcompLetters4 function from the multcompView package. The arguments are the object from an aov function and the object from the TukeyHSD function.
#Finally, we are going to build a table with the mean, the standard deviation and the letters for each treatment (feed).
#The data in this table will be use to build the barplot.
#________________________________________________________________________________________________________#
# analysis of variance
anova <- aov(weight ~ feed, data = chickwts)
# Tukey's test
tukey <- TukeyHSD(anova)
# compact letter display
cld <- multcompLetters4(anova, tukey)
# table with factors and 3rd quantile
dt <- group_by(chickwts, feed) %>%
summarise(w=mean(weight), sd = sd(weight)) %>%
arrange(desc(w))
# extracting the compact letter display and adding to the Tk table
cld <- as.data.frame.list(cld$feed)
dt$cld <- cld$Letters
print(dt)
# Barplot with error bars
ggplot(dt, aes(feed, w)) +
geom_bar(stat = "identity", aes(fill = w), show.legend = FALSE) +
geom_errorbar(aes(ymin = w-sd, ymax=w+sd), width = 0.2) +
labs(x = "Feed Type", y = "Average Weight Gain (g)") +
theme_few()
#Adding the letters indicating significant differences
ggplot(dt, aes(feed, w)) +
geom_bar(stat = "identity", aes(fill = w), show.legend = FALSE) +
geom_errorbar(aes(ymin = w-sd, ymax=w+sd), width = 0.2) +
labs(x = "Feed Type", y = "Average Weight Gain (g)") +
geom_text(aes(label = cld)) +
theme_few()
# Letter’s position: just above the bars and beside the error bars
ggplot(dt, aes(feed, w)) +
geom_bar(stat = "identity", aes(fill = w), show.legend = FALSE) +
geom_errorbar(aes(ymin = w-sd, ymax=w+sd), width = 0.2) +
labs(x = "Feed Type", y = "Average Weight Gain (g)") +
geom_text(aes(label = cld), vjust = -0.5, hjust = -0.5) +
theme_few()
# Letter’s position: just above the error bars
ggplot(dt, aes(feed, w)) +
geom_bar(stat = "identity", aes(fill = w), show.legend = FALSE) +
geom_errorbar(aes(ymin = w-sd, ymax=w+sd), width = 0.2) +
labs(x = "Feed Type", y = "Average Weight Gain (g)") +
geom_text(aes(label = cld, y = w + sd), vjust = -0.5) +
ylim(0,410) +
theme_few()
# Method 2
ggplot(dt, aes(feed, w)) +
geom_bar(stat = "identity", aes(fill = w), show.legend = FALSE) +
geom_errorbar(aes(ymin = w-sd, ymax=w+sd), width = 0.2) +
labs(x = "Feed Type", y = "Average Weight Gain (g)") +
geom_text(aes(label = cld, y = w + sd + 20)) +
ylim(0,410) +
theme_few()
ggsave("barplot.png", width = 4.2, height = 3, dpi = 1000)# could not find Copyggplot, install
setwd("D:\\Study\\Study and Extras\\R Files Projects")
library(ggpubr)
library(factoextra)
library(readxl)
my_data2<- read.csv(file.choose())
#library(readxl)
#df <- read_excel("MAryam PCA Correlation/Excel sheet M Khawar.xlsx", sheet = "Mean")
#df <- my_data2[,-1:-6]
#my_data <- my_data2
#jpeg ("epss.eps", width = 5, height = 5, units = "in", res = 300)
res.pca<- prcomp(my_data2,scale=TRUE)
pca_plot1<-fviz_eig (res.pca)
pca_plot1
pca_plot2<-fviz_pca_ind(res.pca,
col.ind = "cos2",
gradient.cols = c("red", "purple", "green"),
repel = TRUE)
pca_plot2
#to calculate the individual PCA fro treatment/genotype/variety
pca_plot3<-fviz_pca_ind(res.pca,
col.ind="cos2", #color by quality
gradient.cols = c("purple", "orange", "black", "red"),
repel= TRUE #avoid overlapping
)
pca_plot3
#to calculate PCA of PARAMETER
pca_plot4<-fviz_pca_var(res.pca,
col.var = "contrib", #color  by contribution
gradient.cols = c("purple", "orange", "black", "red"),
repel = TRUE, bg = "transparent",
)
pca_plot4
#dev.off()
ggsave("pca_compoIQ2.png",pca_plot1, width = 4,height = 4, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
ggsave("spread_PcaIQ2.png",pca_plot2, width = 6,height = 6, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
ggsave("Circle_PcaIQ2.png",pca_plot3, width = 6,height = 6, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
ggsave("Circle_PcaIQ2.png",pca_plot4, width = 8,height = 8, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
#1#co-relation plot 1
#Method “circle”, “square”, “ellipse”, “number”, “shade”, “color”, “pie”
library(corrplot)
M=cor(df)
corrplot(M,method = "circle", addCoef.col = "black",col = COL2("RdYlBu"), type = "lower")
jpeg("Iqra_Corr2.jpeg", width = 10, height = 10, units = "in", res = 600,pointsize = 6)
corrplot(M,method = "circle", addCoef.col = "black" ,col = COL2("RdYlBu"), type = "lower", bg = "transparent")
dev.off()
jpeg("Iqra_Corr2.jpeg", width = 10, height = 10, units = "in", res = 600,pointsize = 6)
corrplot(M,method = "circle", addCoef.col = "black" ,col = COL2("RdYlBu"), type = "lower", bg = "transparent")
M=cor(df)
M=cor(my_data2)
corrplot(M,method = "pie")
corrplot(M,method = "circle", addCoef.col = "black",col = COL2("RdYlBu"), type = "lower")
jpeg("Iqra_Corr2.jpeg", width = 10, height = 10, units = "in", res = 600,pointsize = 6)
corrplot(M,method = "circle", addCoef.col = "black" ,col = COL2("RdYlBu"), type = "lower", bg = "transparent")
dev.off()
#First Code  is For PCA Correlation.
install.packages("factoextra")
library(factoextra)
library(readxl)
my_data2<- read.csv(file.choose())
#library(readxl)
#df <- read_excel("MAryam PCA Correlation/Excel sheet M Khawar.xlsx", sheet = "Mean")
#df <- my_data2[,-1:-6]
#my_data <- my_data2
#jpeg ("epss.eps", width = 5, height = 5, units = "in", res = 300)
res.pca<- prcomp(my_data2,scale=TRUE)
pca_plot1<-fviz_eig (res.pca)
pca_plot1
pca_plot2<-fviz_pca_ind(res.pca,
col.ind = "cos2",
gradient.cols = c("red", "purple", "green"),
repel = TRUE)
pca_plot2
#to calculate the individual PCA fro treatment/genotype/variety
pca_plot3<-fviz_pca_ind(res.pca,
col.ind="cos2", #color by quality
gradient.cols = c("purple", "orange", "black", "red"),
repel= TRUE #avoid overlapping
)
pca_plot3
#to calculate PCA of PARAMETER
pca_plot4<-fviz_pca_var(res.pca,
col.var = "contrib", #color  by contribution
gradient.cols = c("purple", "orange", "black", "red"),
repel = TRUE, bg = "transparent",
)
pca_plot4
#dev.off()
ggsave("pca_compoIQ2.png",pca_plot1, width = 4,height = 4, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
ggsave("spread_PcaIQ2.png",pca_plot2, width = 6,height = 6, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
ggsave("Circle_PcaIQ2.png",pca_plot3, width = 6,height = 6, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
ggsave("Circle_PcaIQ2.png",pca_plot4, width = 8,height = 8, units = "in", dpi = 600, bg='transparent', pointsize = 30)
dev.set(dev.next())
#1#co-relation plot 1
#Method “circle”, “square”, “ellipse”, “number”, “shade”, “color”, “pie”
library(corrplot)
M=cor(my_data2)
corrplot(M,method = "pie")
corrplot(M,method = "circle", addCoef.col = "black",col = COL2("RdYlBu"), type = "lower")
jpeg("Iqra_Corr2.jpeg", width = 10, height = 10, units = "in", res = 600,pointsize = 6)
corrplot(M,method = "circle", addCoef.col = "black" ,col = COL2("RdYlBu"), type = "lower", bg = "transparent")
dev.off()
jpeg("Iqra_Corr2.jpeg", width = 10, height = 10, units = "in", res = 600,pointsize = 3)
corrplot(M,method = "circle", addCoef.col = "black" ,col = COL2("RdYlBu"), type = "lower", bg = "transparent")
dev.off()
# Install required packages if not already installed
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
# Load library
library(corrplot)
# Example data matrix, replace this with your own dataset
data <- matrix(rnorm(100), ncol=10)
rownames(data) <- colnames(data) <- paste0("Var", 1:10)
# Compute correlation matrix
cor_matrix <- cor(data)
# Calculate p-values
p_matrix <- as.matrix(sapply(1:ncol(data), function(i) {
sapply(1:ncol(data), function(j) {
cor.test(data[,i], data[,j])$p.value
})
}))
# Create corrplot with significance stars
corrplot(cor_matrix, method="circle", type="upper",
order="hclust", tl.col="black", tl.srt=45,
addCoef.col = "black", # Add correlation coefficients
p.mat = p_matrix, # Add p-values
sig.level = 0.05, # Significance level
insig = "blank", # Do not show insignificant correlations
diag=FALSE) # Remove the diagonal
# Install required packages if not already installed
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
# Load library
library(corrplot)
# Example data matrix, replace this with your own dataset
data <- matrix(rnorm(100), ncol=10)
rownames(data) <- colnames(data) <- paste0("Var", 1:10)
# Compute correlation matrix
cor_matrix <- cor(data)
# Calculate p-values
p_matrix <- matrix(nrow = ncol(data), ncol = ncol(data))
for(i in 1:ncol(data)){
for(j in 1:ncol(data)){
p_matrix[i,j] <- cor.test(data[,i], data[,j])$p.value
}
}
# Create corrplot with significance stars
corrplot(cor_matrix, method="circle", type="upper",
order="hclust", tl.col="black", tl.srt=45,
addCoef.col = "black", # Add correlation coefficients
p.mat = p_matrix, # Add p-values
sig.level = 0.05, # Significance level
insig = "blank", # Do not show insignificant correlations
diag=FALSE) # Remove the diagonal
# Install required packages if not already installed
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
# Load library
library(corrplot)
# Example data matrix, replace this with your own dataset
data <- matrix(rnorm(100), ncol=10)
rownames(data) <- colnames(data) <- paste0("Var", 1:10)
# Compute correlation matrix
cor_matrix <- cor(data)
# Calculate p-values
p_matrix <- matrix(nrow = ncol(data), ncol = ncol(data))
for(i in 1:ncol(data)){
for(j in 1:ncol(data)){
p_matrix[i,j] <- cor.test(data[,i], data[,j])$p.value
}
}
# Create corrplot with significance stars
corrplot(cor_matrix, method="circle", type="upper",
order="hclust", tl.col="black", tl.srt=45,
addCoef.col = "black", # Add correlation coefficients
p.mat = p_matrix, # Add p-values
sig.level = 0.05, # Significance level
insig = "blank", # Do not show insignificant correlations
diag=FALSE) # Remove the diagonal
# Install required packages if not already installed
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
# Load library
library(corrplot)
# Example data matrix, replace this with your own dataset
data <- matrix(rnorm(100), ncol=10)
rownames(data) <- colnames(data) <- paste0("Var", 1:10)
# Compute correlation matrix
cor_matrix <- cor(data)
# Calculate p-values
p_matrix <- matrix(NA, ncol(data), ncol(data))
diag(p_matrix) <- 0  # Set diagonal to 0 to avoid NA in cor.test for self-correlation
# Fill the upper triangle of the p-value matrix
for(i in 1:(ncol(data)-1)){
for(j in (i+1):ncol(data)){
test <- cor.test(data[,i], data[,j])
p_matrix[i,j] <- test$p.value
p_matrix[j,i] <- test$p.value
}
}
# Create corrplot with significance stars
corrplot(cor_matrix, method="circle", type="upper",
order="hclust", tl.col="black", tl.srt=45,
addCoef.col = "black", # Add correlation coefficients
p.mat = p_matrix, # Add p-values
sig.level = 0.05, # Significance level
insig = "blank", # Do not show insignificant correlations
diag=FALSE) # Remove the diagonal
# Install required packages if not already installed
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
# Load library
library(corrplot)
# Example data matrix, replace this with your own dataset
data <- matrix(rnorm(100), ncol=10)
rownames(data) <- colnames(data) <- paste0("Var", 1:10)
# Compute correlation matrix
cor_matrix <- cor(data)
# Calculate p-values
p_matrix <- matrix(NA, ncol(data), ncol(data))
diag(p_matrix) <- 0  # Set diagonal to 0 to avoid NA in cor.test for self-correlation
# Fill the upper triangle of the p-value matrix
for(i in 1:(ncol(data)-1)){
for(j in (i+1):ncol(data)){
test <- cor.test(data[,i], data[,j])
p_matrix[i,j] <- test$p.value
p_matrix[j,i] <- test$p.value
}
}
# Create corrplot with significance stars
corrplot(cor_matrix, method="circle", type="upper",
order="hclust", tl.col="black", tl.srt=45,
addCoef.col = "black", # Add correlation coefficients
p.mat = p_matrix, # Add p-values
sig.level = 0.05, # Significance level
insig = "blank", # Do not show insignificant correlations
diag=FALSE) # Remove the diagonal
# Install required packages if not already installed
if (!requireNamespace("corrplot", quietly = TRUE)) {
install.packages("corrplot")
}
# Load library
library(corrplot)
# Example data matrix, replace this with your own dataset
data <- matrix(rnorm(100), ncol=10)
rownames(data) <- colnames(data) <- paste0("Var", 1:10)
# Compute correlation matrix
cor_matrix <- cor(data)
# Calculate p-values
p_matrix <- matrix(NA, ncol(data), ncol(data))
diag(p_matrix) <- 0  # Set diagonal to 0 to avoid NA in cor.test for self-correlation
# Fill the upper triangle of the p-value matrix
for(i in 1:(ncol(data)-1)){
for(j in (i+1):ncol(data)){
test <- cor.test(data[,i], data[,j])
p_matrix[i,j] <- test$p.value
p_matrix[j,i] <- test$p.value
}
}
# Create corrplot with significance stars
corrplot(cor_matrix, method="circle", type="upper",
order="hclust", tl.col="black", tl.srt=45,
addCoef.col = "black", # Add correlation coefficients
p.mat = p_matrix, # Add p-values
sig.level = 0.05, # Significance level
insig = "blank", # Do not show insignificant correlations
diag=FALSE) # Remove the diagonal
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Calculate p-values for correlations
p_values <- cor_pmat(data, method = "pearson")$p
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values
get_p_values <- function(x, y) {
p_value <- cor.test(x, y)$p.value
return(p_value)
}
# Calculate p-values for correlations
p_values <- cor.mtest(data, get_p_values)$p
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values
get_p_values <- function(x, y) {
p_value <- cor.test(x, y)$p.value
return(p_value)
}
# Calculate p-values for correlations
p_values <- cor.mtest(data, get_p_values)$p
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values
get_p_values <- function(x, y) {
p_value <- cor.test(x, y)$p.value
return(p_value)
}
# Calculate p-values for correlations
p_values <- cor.mtest(data, get_p_values)$p
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values for correlations
get_p_values <- function(x, y) {
cor_test <- cor.test(x, y)
return(cor_test$p.value)
}
# Calculate p-values for correlations
p_values <- outer(colnames(data), colnames(data), FUN = function(x, y) get_p_values(data[[x]], data[[y]]))
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values for correlations
get_p_values <- function(x, y) {
cor_test <- cor.test(x, y)
return(cor_test$p.value)
}
# Calculate p-values for correlations
p_values <- outer(colnames(data), colnames(data), FUN = function(x, y) get_p_values(data[[x]], data[[y]]))
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values for correlations
get_p_values <- function(x, y) {
cor_test <- cor.test(x, y)
return(cor_test$p.value)
}
# Calculate p-values for correlations
p_values <- outer(colnames(data), colnames(data), FUN = function(x, y) get_p_values(data[[x]], data[[y]]))
1
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values for correlations
get_p_values <- function(x, y) {
cor_test <- cor.test(x, y)
return(cor_test$p.value)
}
# Calculate p-values for correlations
p_values <- outer(colnames(data), colnames(data), FUN = function(x, y) get_p_values(data[[x]], data[[y]]))
0
exit
ez
# Load required library
library(corrplot)
# Sample data (replace with your own dataset)
data <- mtcars
# Calculate correlation matrix
corr_matrix <- cor(data)
# Function to calculate p-values for correlations
get_p_values <- function(x, y) {
cor_test <- cor.test(x, y)
return(cor_test$p.value)
}
# Calculate p-values for correlations
p_values <- outer(1:ncol(data), 1:ncol(data), FUN = function(x, y) get_p_values(data[[x]], data[[y]]))
